#!/usr/bin/pythonfrom mwcp.malwareconfigparser import malwareconfigparserimport reimport urlparseimport loggingclass bergard(malwareconfigparser):    def __init__(self, reporter=None):        malwareconfigparser.__init__(self,          description='Bergard configuration parser.',          author='',          reporter=reporter          )    def run(self):        #get out data        filebuf = self.reporter.data        # 8B .                   mov     ecx, [eax]        # 80 . . 90              xor     byte ptr [ecx+edx], 90h        # .                      inc     edx        # 3B . .                 cmp     edx, [eax+4]        # 72 .                   jb      short loc_10        key_pats = [re.compile('\x80.\x08\x00.{8,12}\x8b.\x80..(.).{1,3}\x3b.\x04.{4,8}\xc3'),                    re.compile('\x33.\x80.{5}(.).\x3d.{3}\x00.{2}\xc3')]        #http_pat = re.compile('http://.{2,500}\x00', re.S)        http_pat = re.compile('http://.{2,500}:[0-9]{1,5}', re.S)        keys = list()        for pat in key_pats:            hits = re.finditer(pat, filebuf)            for match in hits:                keys.append(match.group(1))        for key in keys:            xor_data = ''.join([chr(ord(key)^ord(x)) for x in filebuf])            hits = xor_data.split('http')            if len(hits) > 0:                hits.pop(0)                for hit in hits:                    tmp = ''                    for byte in hit:                        if ord(byte) != ord(key) and ord(byte) in [x for x in range(32,126)]:                            tmp += byte                        else:                            break                    check_net = urlparse.urlsplit('http' + tmp)                    if check_net.netloc:                        url = 'http' + tmp                        self.reporter.add_metadata('c2_url', url)                        self.reporter.add_metadata('key', str(hex(ord(key))))        if 'c2_url' not in self.reporter.metadata:            for key in range(0,255):                #xor_data = ''.join([chr(key^ord(x)) for x in filebuf if ord(x) != 0x00 and ord(x) != key])                xor_data = ''.join([chr(key^ord(x)) for x in filebuf])                for hit in http_pat.finditer(xor_data):                    tmp = ''                    for byte in hit.group(0):                        if ord(byte) != key and ord(byte) in [x for x in range(32,126)]:                            tmp += byte                        else:                            break                    check_net = urlparse.urlsplit(tmp)                    if check_net.netloc:                        self.reporter.add_metadata('c2_url', tmp)                        self.reporter.add_metadata('key', str(hex(key)))